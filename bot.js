const {
	EmbedBuilder,
	ActionRowBuilder,
	ButtonBuilder,
	ButtonStyle,
} = require('discord.js')
const axios = require('axios')
const cheerio = require('cheerio')
const fs = require('fs').promises
const path = require('path')

const SCHEDULE_FILE = path.join(__dirname, 'schedule.json')

async function loadSchedule() {
	try {
		const data = await fs.readFile(SCHEDULE_FILE, 'utf8')
		return JSON.parse(data)
	} catch (error) {
		return []
	}
}

async function saveSchedule(schedule) {
	await fs.writeFile(SCHEDULE_FILE, JSON.stringify(schedule, null, 2))
}

function isValidDate(dateStr) {
	try {
		// –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–∞—Ç—É –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
		const [day, month, year] = dateStr.split('.').map(Number)

		// –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–∞—Ç–∏
		const date = new Date(year, month - 1, day)
		const today = new Date()
		today.setHours(0, 0, 0, 0)

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞ —ñ –Ω–µ –≤ –º–∏–Ω—É–ª–æ–º—É
		const isValid =
			date instanceof Date &&
			!isNaN(date) &&
			date.getDate() === day &&
			date.getMonth() === month - 1 &&
			date.getFullYear() === year &&
			date >= today

		if (!isValid) {
			console.log('Invalid date:', {
				dateStr,
				parsed: { day, month, year },
				date,
				today,
				checks: {
					isDate: date instanceof Date,
					isNotNaN: !isNaN(date),
					dayMatch: date.getDate() === day,
					monthMatch: date.getMonth() === month - 1,
					yearMatch: date.getFullYear() === year,
					notInPast: date >= today,
				},
			})
		}

		return isValid
	} catch (error) {
		console.error('Date validation error:', error)
		return false
	}
}

function isValidTime(timeStr) {
	const singleTimeRegex = /^([0-1][0-9]|2[0-3]):[0-5][0-9]$/
	const rangeTimeRegex =
		/^([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]$/

	if (singleTimeRegex.test(timeStr)) {
		return true
	}

	if (rangeTimeRegex.test(timeStr)) {
		const [startTime, endTime] = timeStr.split('-')
		const [startHour, startMinute] = startTime.split(':').map(Number)
		const [endHour, endMinute] = endTime.split(':').map(Number)

		const startMinutes = startHour * 60 + startMinute
		const endMinutes = endHour * 60 + endMinute

		return endMinutes > startMinutes
	}

	return false
}

function formatTimeDisplay(time) {
	if (time.includes('-')) {
		const [start, end] = time.split('-')
		return `${start} ‚Äî ${end}`
	}
	return time
}

async function handleAddSchedule(interaction, date, time, title) {
	await interaction.deferReply()

	const schedule = await loadSchedule()

	const isDuplicate = schedule.some(
		event =>
			event.date === date &&
			event.time === time &&
			event.title.toLowerCase() === title.toLowerCase()
	)

	if (isDuplicate) {
		const errorEmbed = new EmbedBuilder()
			.setColor('#ED4245')
			.setAuthor({
				name: '–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó',
				iconURL:
					'https://ih1.redbubble.net/image.3117871954.9351/st,small,507x507-pad,600x600,f8f8f8.jpg',
			})
			.setDescription(
				'‚ùå –¢–∞–∫–∞ –ø–æ–¥—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ!\n\n' +
					`**${title}**\n` +
					`üìÖ ${date}\n` +
					`‚è∞ ${time}`
			)
			.setFooter({
				text: 'Valheim Project ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è',
				iconURL:
					'https://gcdn.thunderstore.io/live/repository/icons/Harleyy-HarleysModpackEnhanced-1.0.7.png.256x256_q95.png',
			})
		return await interaction.editReply({ embeds: [errorEmbed] })
	}

	const newEvent = {
		id: schedule.length + 1,
		date,
		time,
		title,
		createdBy: interaction.user.id,
		createdAt: new Date().toISOString(),
	}

	schedule.push(newEvent)
	await saveSchedule(schedule)

	const [day, month, year] = date.split('.')
	const timeDisplay = formatTimeDisplay(time)

	const months = {
		'01': '–°—ñ—á–Ω—è',
		'02': '–õ—é—Ç–æ–≥–æ',
		'03': '–ë–µ—Ä–µ–∑–Ω—è',
		'04': '–ö–≤—ñ—Ç–Ω—è',
		'05': '–¢—Ä–∞–≤–Ω—è',
		'06': '–ß–µ—Ä–≤–Ω—è',
		'07': '–õ–∏–ø–Ω—è',
		'08': '–°–µ—Ä–ø–Ω—è',
		'09': '–í–µ—Ä–µ—Å–Ω—è',
		10: '–ñ–æ–≤—Ç–Ω—è',
		11: '–õ–∏—Å—Ç–æ–ø–∞–¥–∞',
		12: '–ì—Ä—É–¥–Ω—è',
	}

	const embed = new EmbedBuilder()
		.setColor('#5865F2')
		.setAuthor({
			name: '–ù–æ–≤–∞ –ø–æ–¥—ñ—è –¥–æ–¥–∞–Ω–∞ –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É',
			iconURL:
				'https://ih1.redbubble.net/image.3117871954.9351/st,small,507x507-pad,600x600,f8f8f8.jpg',
		})
		.setDescription(
			`üí´ **–û–ø–∏—Å –ø–æ–¥—ñ—ó:** ${title}\n\n` +
				`üìÖ ${day} ${months[month]} ${year}\n` +
				`‚è∞ ${timeDisplay}\n` +
				`üë§ ${interaction.user.username}\n` +
				`üîç ID: #${newEvent.id}`
		)
		.setFooter({
			text: `Valheim Project ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è ‚Ä¢ ${new Date().toLocaleString(
				'uk-UA',
				{
					day: '2-digit',
					month: '2-digit',
					year: 'numeric',
					hour: '2-digit',
					minute: '2-digit',
				}
			)}`,
			iconURL:
				'https://gcdn.thunderstore.io/live/repository/icons/Harleyy-HarleysModpackEnhanced-1.0.7.png.256x256_q95.png',
		})

	await interaction.editReply({ embeds: [embed] })
}

const emojis = {
	spacer: '‚Ä¢',
}

async function handleShowSchedule(interaction) {
	await interaction.deferReply()

	const schedule = await loadSchedule()
	if (schedule.length === 0) {
		const emptyEmbed = new EmbedBuilder()
			.setColor('#5865F2')
			.setAuthor({
				name: '–†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π',
				iconURL:
					'https://ih1.redbubble.net/image.3117871954.9351/st,small,507x507-pad,600x600,f8f8f8.jpg',
			})
			.setDescription('*–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π*')
			.setFooter({
				text: 'Valheim Project ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è',
				iconURL:
					'https://gcdn.thunderstore.io/live/repository/icons/Harleyy-HarleysModpackEnhanced-1.0.7.png.256x256_q95.png',
			})
		return await interaction.editReply({ embeds: [emptyEmbed] })
	}

	schedule.sort((a, b) => {
		const dateA = new Date(
			a.date.split('.').reverse().join('-') + 'T' + a.time.split('-')[0]
		)
		const dateB = new Date(
			b.date.split('.').reverse().join('-') + 'T' + b.time.split('-')[0]
		)
		return dateA - dateB
	})

	const embed = new EmbedBuilder()
		.setColor('#5865F2')
		.setDescription(
			`# –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π\n\n` +
				schedule
					.map(event => {
						const [startTime, endTime] = event.time.split('-')
						return (
							`## ${event.title}\n` +
							`üìÖ –î–∞—Ç–∞ ‚Ä¢ üë• –ß–∞—Å ‚Ä¢ üë§ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä\n` +
							`${event.date} ‚Ä¢ ${startTime}‚Äî${endTime} ‚Ä¢ <@${event.createdBy}>\n` +
							`ID: ${event.id}`
						)
					})
					.join('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n')
		)
		.setThumbnail(
			'https://ih1.redbubble.net/image.3117871954.9351/st,small,507x507-pad,600x600,f8f8f8.jpg'
		)
		.setFooter({
			text: 'Valheim Project ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è',
			iconURL:
				'https://gcdn.thunderstore.io/live/repository/icons/Harleyy-HarleysModpackEnhanced-1.0.7.png.256x256_q95.png',
		})

	await interaction.editReply({ embeds: [embed] })
}

async function handleDeleteSchedule(interaction, id) {
	await interaction.deferReply()

	const schedule = await loadSchedule()
	const eventIndex = schedule.findIndex(event => event.id === id)

	if (eventIndex === -1) {
		const errorEmbed = new EmbedBuilder()
			.setColor('#ED4245')
			.setAuthor({
				name: '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–¥—ñ—ó',
				iconURL:
					'https://ih1.redbubble.net/image.3117871954.9351/st,small,507x507-pad,600x600,f8f8f8.jpg',
			})
			.setDescription('‚ùå –ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!')
			.setFooter({
				text: 'Valheim Project ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è',
				iconURL:
					'https://gcdn.thunderstore.io/live/repository/icons/Harleyy-HarleysModpackEnhanced-1.0.7.png.256x256_q95.png',
			})
		return await interaction.editReply({ embeds: [errorEmbed] })
	}

	const event = schedule[eventIndex]
	if (event.createdBy !== interaction.user.id) {
		const errorEmbed = new EmbedBuilder()
			.setColor('#FF7B7B')
			.setDescription('# ‚ùå –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª—è—Ç–∏ —Ç—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω—ñ –ø–æ–¥—ñ—ó!')
			.setThumbnail(
				'https://cdn.discordapp.com/avatars/1215679242817966171/589c7a34135c8ce0d678ae1e828091c8.webp'
			)
		return await interaction.editReply({ embeds: [errorEmbed] })
	}

	schedule.splice(eventIndex, 1)
	await saveSchedule(schedule)

	const embed = new EmbedBuilder()
		.setColor('#57F287')
		.setDescription(
			`# ‚úÖ –ü–æ–¥—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ\n\n` +
				`## ${event.title}\n\n` +
				`üìÖ –î–∞—Ç–∞ ‚Ä¢ ‚è∞ –ß–∞—Å\n` +
				`${event.date} ‚Ä¢ ${event.time}\n\n` +
				`ID: ${event.id}`
		)
		.setThumbnail(
			'https://cdn.discordapp.com/avatars/1215679242817966171/589c7a34135c8ce0d678ae1e828091c8.webp'
		)

	await interaction.editReply({ embeds: [embed] })
}

async function handleSendSchedule(interaction, user, id) {
	await interaction.deferReply()

	const schedule = await loadSchedule()
	const event = schedule.find(event => event.id === id)

	if (!event) {
		return await interaction.editReply('‚ùå –ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!')
	}

	const embed = new EmbedBuilder()
		.setColor('#0099ff')
		.setTitle('üìÖ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é')
		.setDescription(
			`**${event.title}**\n` +
				`üìÖ ${event.date}\n` +
				`‚è∞ ${event.time}\n` +
				`üë§ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä: <@${event.createdBy}>`
		)
		.setFooter({ text: `ID: ${event.id}` })

	try {
		await user.send({ embeds: [embed] })
		await interaction.editReply(
			`‚úÖ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${user.tag}!`
		)
	} catch (error) {
		await interaction.editReply(
			'‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –ú–æ–∂–ª–∏–≤–æ, —É –Ω—å–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—ñ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.'
		)
	}
}

async function handleSearch(interaction, query, page = 1) {
	try {
		const isButton = interaction.isButton()

		if (!isButton) {
			await interaction.deferReply()
		}

		const searchUrl = `https://www.olx.ua/d/uk/list/q-${encodeURIComponent(
			query
		)}/?page=${page}`
		const response = await axios.get(searchUrl)
		const $ = cheerio.load(response.data)

		const results = []
		$('div[data-cy="l-card"]').each((i, el) => {
			if (i >= 5) return false

			const title = $(el).find('[data-testid="ad-title"]').text().trim()
			const price = $(el).find('[data-testid="ad-price"]').text().trim()
			const link = $(el).find('a').attr('href')
			const fullLink = link.startsWith('http')
				? link
				: `https://www.olx.ua${link}`
			const imgUrl = $(el).find('img').attr('src')

			results.push({ title, price, link: fullLink, imgUrl })
		})

		if (results.length === 0) {
			const noResultsMessage = {
				content: '‚ùå –ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.',
			}
			if (isButton) {
				await interaction.message.edit(noResultsMessage)
			} else {
				await interaction.editReply(noResultsMessage)
			}
			return
		}

		const embed = new EmbedBuilder()
			.setColor('#2b2d31')
			.setTitle(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É: ${query}`)

		const description = results
			.map((item, i) => {
				const price = item.price.includes('–≥—Ä–Ω')
					? item.price
					: `${item.price} –≥—Ä–Ω.`
				return `${i + 1}.\nüí∞ ${price}\nüîó [–ü–æ—Å–∏–ª–∞–Ω–Ω—è](${item.link})`
			})
			.join('\n\n')

		embed
			.setDescription(description)
			.setThumbnail(results[0]?.imgUrl || null)
			.setFooter({
				text: `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${page} ‚Ä¢ ${new Date().toLocaleTimeString('uk-UA', {
					hour: '2-digit',
					minute: '2-digit',
				})}`,
			})

		const row = new ActionRowBuilder().addComponents(
			new ButtonBuilder()
				.setCustomId(`prev:${query}:${page}`)
				.setEmoji('‚¨ÖÔ∏è')
				.setStyle(ButtonStyle.Secondary)
				.setDisabled(page <= 1),
			new ButtonBuilder()
				.setCustomId(`next:${query}:${page}`)
				.setEmoji('‚û°Ô∏è')
				.setStyle(ButtonStyle.Secondary)
				.setDisabled(results.length < 5)
		)

		const messagePayload = { embeds: [embed], components: [row] }

		let message
		if (isButton) {
			message = await interaction.message.edit(messagePayload)
			try {
				await interaction.deferUpdate()
			} catch (error) {}
		} else {
			message = await interaction.editReply(messagePayload)
		}

		const collector = message.createMessageComponentCollector({
			filter: i => i.user.id === interaction.user.id,
			time: 300000,
		})

		collector.on('collect', async buttonInt => {
			try {
				const [action, q, p] = buttonInt.customId.split(':')
				const newPage = action === 'next' ? Number(p) + 1 : Number(p) - 1
				await handleSearch(buttonInt, q, newPage)
			} catch (error) {
				console.error('Button interaction error:', error)
			}
		})
	} catch (error) {
		console.error('Search error:', error)
		const errorMessage = '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'

		try {
			if (isButton) {
				await interaction.message.edit({
					content: errorMessage,
					components: [],
				})
			} else if (!interaction.replied) {
				await interaction.reply({ content: errorMessage, ephemeral: true })
			} else {
				await interaction.editReply({ content: errorMessage })
			}
		} catch (e) {
			console.error('Error handling error:', e)
		}
	}
}

async function handleHelp(interaction) {
	const embed = new EmbedBuilder()
		.setColor('#0099ff')
		.setTitle('üìã –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞')
		.setDescription(
			'üîç **/search** `<–∑–∞–ø–∏—Ç>` - –ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ OLX\n' +
				'‚ùì **/help** - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
		)

	await interaction.reply({ embeds: [embed] })
}

async function handleMultipleSchedules(interaction, eventsInput) {
	await interaction.deferReply()
	const schedule = await loadSchedule()
	const results = []
	const errors = []

	const eventsList = eventsInput
		.split(';')
		.map(e => e.trim())
		.filter(e => e.length > 0)

	for (const eventStr of eventsList) {
		try {
			const [date, time, ...titleParts] = eventStr.split(' ').filter(Boolean)
			const title = titleParts.join(' ')

			if (!date || !time || !title) {
				errors.push(
					`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—ñ—ó. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –î–î.–ú–ú.–†–†–†–† –ì–ì:–•–•[-–ì–ì:–•–•] –ù–∞–∑–≤–∞\n–û—Ç—Ä–∏–º–∞–Ω–æ: ${eventStr}`
				)
				continue
			}

			if (!date.match(/^\d{2}\.\d{2}\.\d{4}$/) || !isValidDate(date)) {
				errors.push(`–ù–µ–¥—ñ–π—Å–Ω–∞ –¥–∞—Ç–∞: ${date}`)
				continue
			}

			if (!time.match(/^\d{2}:\d{2}(-\d{2}:\d{2})?$/) || !isValidTime(time)) {
				errors.push(`–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É: ${time}`)
				continue
			}

			const isDuplicate = schedule.some(
				event =>
					event.date === date &&
					event.time === time &&
					event.title.toLowerCase() === title.toLowerCase()
			)

			if (isDuplicate) {
				errors.push(`–ü–æ–¥—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î: ${title} (${date} ${time})`)
				continue
			}

			const newEvent = {
				id: schedule.length + 1,
				date,
				time,
				title,
				createdBy: interaction.user.id,
				createdAt: new Date().toISOString(),
			}

			schedule.push(newEvent)
			results.push(newEvent)
		} catch (error) {
			console.error('Event processing error:', error)
			errors.push(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–¥—ñ—ó: ${eventStr}`)
		}
	}

	if (results.length > 0) {
		await saveSchedule(schedule)
	}

	const [day, month, year] = results[0]?.date.split('.') || []
	const months = {
		'01': '–°—ñ—á–Ω—è',
		'02': '–õ—é—Ç–æ–≥–æ',
		'03': '–ë–µ—Ä–µ–∑–Ω—è',
		'04': '–ö–≤—ñ—Ç–Ω—è',
		'05': '–¢—Ä–∞–≤–Ω—è',
		'06': '–ß–µ—Ä–≤–Ω—è',
		'07': '–õ–∏–ø–Ω—è',
		'08': '–°–µ—Ä–ø–Ω—è',
		'09': '–í–µ—Ä–µ—Å–Ω—è',
		10: '–ñ–æ–≤—Ç–Ω—è',
		11: '–õ–∏—Å—Ç–æ–ø–∞–¥–∞',
		12: '–ì—Ä—É–¥–Ω—è',
	}

	const embed = new EmbedBuilder()
		.setColor(results.length > 0 ? '#5865F2' : '#ED4245')
		.setAuthor({
			name: '–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É',
			iconURL:
				'https://ih1.redbubble.net/image.3117871954.9351/st,small,507x507-pad,600x600,f8f8f8.jpg',
		})

	if (results.length > 0) {
		let description = '‚úÖ **–£—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ –ø–æ–¥—ñ—ó:**\n\n'

		for (const event of results) {
			const [eventDay, eventMonth, eventYear] = event.date.split('.')
			const timeDisplay = formatTimeDisplay(event.time)

			description +=
				`### üìù –û–ø–∏—Å –ø–æ–¥—ñ—ó: ${event.title}\n` +
				`üìÖ ${eventDay} ${months[eventMonth]} ${eventYear}\n` +
				`‚è∞ ${timeDisplay}\n` +
				`üë§ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä: <@${event.createdBy}>\n` +
				`üîç ID: #${event.id}\n\n` +
				`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`
		}

		embed.setDescription(description)
	} else {
		embed.setDescription(`# ‚ùå –ü–æ–º–∏–ª–∫–∏:\n\n${errors.join('\n')}`)
	}

	embed.setFooter({
		text: `Valheim Project ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è ‚Ä¢ ${new Date().toLocaleString(
			'uk-UA',
			{
				day: '2-digit',
				month: '2-digit',
				year: 'numeric',
				hour: '2-digit',
				minute: '2-digit',
			}
		)}`,
		iconURL:
			'https://gcdn.thunderstore.io/live/repository/icons/Harleyy-HarleysModpackEnhanced-1.0.7.png.256x256_q95.png',
	})

	await interaction.editReply({ embeds: [embed] })
}

module.exports = {
	handleSearch,
	handleHelp,
	handleAddSchedule,
	handleShowSchedule,
	handleDeleteSchedule,
	handleSendSchedule,
	handleMultipleSchedules,
}
